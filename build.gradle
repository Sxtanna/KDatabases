group 'com.sxtanna.db'
version '1.0'

buildscript {

    ext {
        versionDokka = '0.9.18'

        versionShadow = '5.0.0'
        versionKotlin = '1.3.31'

        versionNexusStaging = '0.5.1'
    }

    repositories {
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }

        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$versionDokka"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versionKotlin"
        classpath "com.github.jengelman.gradle.plugins:shadow:$versionShadow"

        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$versionNexusStaging"
    }

}

apply plugin: 'io.codearte.nexus-staging'

subprojects {

    // plugins
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'com.github.johnrengelman.shadow'

    // dependencies
    repositories {
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }

        jcenter()
        mavenCentral()
    }

    dependencies {
        compileOnly "org.jetbrains.kotlin:kotlin-reflect"
        compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.0-M1"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.0-M1"
        testImplementation "org.junit.platform:junit-platform-launcher:1.5.0-M1"
    }

    sourceSets {
        test.compileClasspath += configurations.compileOnly
    }

    // tasks
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
            freeCompilerArgs = ['-Xallow-kotlin-package']
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    task javadocJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // options
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    shadowJar {
        classifier = ""
    }

    dokka {
        outputFormat = 'javadoc'
        outputDirectory = javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { gradle.taskGraph.hasTask('uploadArchives') }

        sign shadowJar
        sign sourcesJar
        sign javadocJar
    }

    nexusStaging {
        packageGroup = 'com.sxtanna'
    }


    // global build task
    task buildProjects(dependsOn: [clean, shadowJar, sourcesJar, javadocJar])

    /**
     * Automatic upload, close, and release is broken for some reason
     *
     * Run in this order
     *  * uploadArchives
     *  * closeRepository
     *  * promoteRepository
     */

}